@model List<ST10150702_PROG6212_POE.Models.Claim>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HR View - Claims</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>


    <style>
        body, html {
            height: 100%;
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            background-image: url('/Pictures/lecturebackground.jpg');
            background-size: 350px;
            background-repeat: repeat;
            background-position: center center;
            background-attachment: fixed;
        }

            body::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: rgba(255, 255, 255, 0.6);
                z-index: 0;
            }

        /* Main container styling */
        .container {
            background-color: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
            width: 100%;
            max-width: 1200px;
            position: relative;
            z-index: 1;
        }

        /* Filters section */
        .filter-container {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

            .filter-group label {
                margin-bottom: 0.25rem;
                font-size: 0.9rem;
            }

            .filter-group input, .filter-group select {
                padding: 0.5rem;
                border: 1px solid #ddd;
                border-radius: 4px;
            }

        .filter-button-group {
            display: flex;
            gap: 0.5rem;
            align-items: flex-end;
        }

        .go-button, .reset-button {
            background-color: #007BFF;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            height: 38px;
        }

        .reset-button {
            background-color: #6c757d;
        }

        /* Table styling for claims */
        .claim-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 2rem;
        }

            .claim-table th, .claim-table td {
                border: 1px solid #ddd;
                padding: 0.75rem;
                text-align: left;
            }

            .claim-table th {
                background-color: #f4f4f4;
                font-weight: bold;
            }

        .status-approved {
            background-color: #4CAF50;
            color: white;
        }

        .status-rejected {
            background-color: #f44336;
            color: white;
        }

        .status-pending {
            background-color: #f58d42;
            color: white;
        }

        /* Button to show invoice */
        .invoice-button {
            background-color: #007BFF;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            display: inline-block;
        }

            .invoice-button:hover {
                background-color: #0056b3;
            }
    </style>
</head>

<body>

        <div id="view-claims" class="tab-content">
        <h1><strong>HR View</strong></h1>

            <!-- Filter Container -->
            <div class="filter-container">
                <div class="filter-group">
                    <label for="filterLecturerID">Lecturer ID</label>
                    <input type="number" id="filterLecturerID" placeholder="Filter by Lecturer ID">
                </div>
                <div class="filter-group">
                    <label for="filterHoursWorked">Hours Worked</label>
                    <select id="filterHoursWorked">
                        <option value="">All</option>
                        <option value="0-10">0 - 10</option>
                        <option value="10-20">10 - 20</option>
                        <option value="20-30">20 - 30</option>
                        <option value="30+">30+</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="filterHourlyRate">Hourly Rate</label>
                    <select id="filterHourlyRate">
                        <option value="">All</option>
                        <option value="0-50">R0 - R50</option>
                        <option value="50-100">R50 - R100</option>
                        <option value="100+">R100+</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="filterModuleCode">Module Code</label>
                    <select id="filterModuleCode">
                        <option value="">All Modules</option>
                        <option value="PROG6111">PROG6111</option>
                        <option value="PROG6222">PROG6222</option>
                        <option value="CLDV6212">CLDV6212</option>
                        <option value="ADDB7311">ADDB7311</option>
                        <option value="CLDV5111">CLDV5111</option>
                        <option value="MPFD5622">MPFD5622</option>
                        <option value="SOEN6212">SOEN6212</option>
                        <option value="HETC7331">HETC7331</option>
                        <option value="FDAB6221">FDAB6221</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="filterAmount">Amount Due</label>
                    <select id="filterAmount">
                        <option value="">All</option>
                        <option value="0-500">R0 - R500</option>
                        <option value="500-1000">R500 - R1000</option>
                        <option value="1000+">R1000+</option>
                    </select>
                </div>
                <div class="filter-button-group">
                    <button id="goFilterButton" class="go-button">Go</button>
                    <button onclick="resetFilters()" class="reset-button">Reset</button>
                </div>
            </div>

            <div id="filterSummary" class="filter-summary"></div>

        <!-- Your filter and table structure goes here -->

        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>ClaimID</th>
                        <th>LecturerID</th>
                        <th>Total Hours Worked</th>
                        <th>Hourly Rate</th>
                        <th>Amount Due</th>
                        <th>Module Code</th>
                        <th>Description</th>
                        <th>Status</th>
                        <th>Actions</th>
                        <th>Supporting Documents</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.ClaimID</td>
                            <td>@item.LecturerID</td>
                            <td>@item.TotalHoursWorked</td>
                            <td>@item.HourlyRate</td>
                            <td>@item.AmountDue</td>
                            <td>@item.ModuleCode</td>
                            <td>@item.Description</td>
                            <td class="status-column" style="
                            @if(item.Status == "Approved") {
                                @:background-color: #4CAF50; color: white;
                            } else if(item.Status == "Rejected") {
                                @:background-color: #f44336; color: white;
                            } else if(item.Status == "Pending") {
                                @:background-color: #f58d42; color: white;
                            }">
                                @item.Status
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger" onclick="deleteClaim(@item.ClaimID)">Delete</button>
                                <button type="button" class="btn btn-primary" onclick="generateInvoice(@item.ClaimID)">Generate Invoice</button>
                            </td>
                            <td>
                                @if (!string.IsNullOrEmpty(item.DocumentPath))
                                {
                                    var documents = item.DocumentPath.Split(',');
                                    foreach (var doc in documents)
                                    {
                                        if (!string.IsNullOrWhiteSpace(doc))
                                        {
                                            var fileName = System.IO.Path.GetFileName(doc);
                                            <div>
                                                <a href="@Url.Content("~/" + doc)" target="_blank">@fileName</a>
                                            </div>
                                        }
                                    }
                                }
                                else
                                {
                                    <span>No documents uploaded</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button onclick="window.location.href='/Lecturer/ManageLecturers'">Manage Lecturers</button>

        </div>

    </div>

    <script>

        // Function to generate and download PDF for a specific claim
        //---------------------------------------------------------------------------------------

        function generateInvoice(claimID) {
            // Convert claimID to string to ensure correct comparison
            claimID = claimID.toString();

            // Find the table row corresponding to the claimID
            const row = Array.from(document.querySelectorAll('table tbody tr'))
                .find(tr => tr.cells[0].textContent.trim() === claimID);

            if (!row) {
                alert('Claim not found');
                return;
            }

            // Extract data directly from the table row cells
            const claim = {
                ClaimID: row.cells[0].textContent.trim(),
                LecturerID: row.cells[1].textContent.trim(),
                TotalHoursWorked: row.cells[2].textContent.trim(),
                HourlyRate: row.cells[3].textContent.trim(),
                AmountDue: row.cells[4].textContent.trim(),
                ModuleCode: row.cells[5].textContent.trim(),
                Description: row.cells[6].textContent.trim(),
                Status: row.cells[7].textContent.trim()
            };

            // Create popup modal
            const modal = document.createElement('div');
            modal.style.position = 'fixed';
            modal.style.top = '0';
            modal.style.left = '0';
            modal.style.width = '100%';
            modal.style.height = '100%';
            modal.style.backgroundColor = 'rgba(0,0,0,0.5)';
            modal.style.display = 'flex';
            modal.style.justifyContent = 'center';
            modal.style.alignItems = 'center';
            modal.style.zIndex = '1000';

            const modalContent = document.createElement('div');
            modalContent.style.backgroundColor = 'white';
            modalContent.style.padding = '20px';
            modalContent.style.borderRadius = '10px';
            modalContent.style.width = '400px';
            modalContent.style.maxHeight = '80%';
            modalContent.style.overflowY = 'auto';

            // Invoice details
            modalContent.innerHTML = `
                <h2>Invoice for Claim ${claim.ClaimID}</h2>
                <p><strong>Lecturer ID:</strong> ${claim.LecturerID}</p>
                <p><strong>Total Hours Worked:</strong> ${claim.TotalHoursWorked}</p>
                <p><strong>Hourly Rate:</strong> ${claim.HourlyRate}</p>
                <p><strong>Amount Due:</strong> ${claim.AmountDue}</p>
                <p><strong>Module Code:</strong> ${claim.ModuleCode}</p>
                <p><strong>Description:</strong> ${claim.Description}</p>
                <p><strong>Status:</strong> ${claim.Status}</p>
                <div style="display: flex; justify-content: space-between; margin-top: 20px;">
                    <button id="closeModal" style="padding: 10px; background-color: #6c757d; color: white; border: none; border-radius: 5px;">Close</button>
                    <button id="downloadPDF" style="padding: 10px; background-color: #007BFF; color: white; border: none; border-radius: 5px;">Download PDF</button>
                </div>
            `;

            modal.appendChild(modalContent);
            document.body.appendChild(modal);

            // Close modal functionality
            document.getElementById('closeModal').addEventListener('click', () => {
                document.body.removeChild(modal);
            });

            // Download PDF functionality
            document.getElementById('downloadPDF').addEventListener('click', () => {
                // Check if jsPDF is available
                if (typeof jspdf === 'undefined') {
                    console.error('jsPDF library not loaded');
                    alert('PDF generation library is not available');
                    return;
                }

                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();

                // Add title
                doc.setFontSize(16);
                doc.text('Claim Invoice', 105, 20, { align: 'center' });

                // Add invoice details
                doc.setFontSize(12);
                let yOffset = 40;
                const labelXOffset = 20;
                const valueXOffset = 80;

                const details = [
                    ['Claim ID:', claim.ClaimID],
                    ['Lecturer ID:', claim.LecturerID],
                    ['Total Hours Worked:', claim.TotalHoursWorked],
                    ['Hourly Rate:', claim.HourlyRate],
                    ['Amount Due:', claim.AmountDue],
                    ['Module Code:', claim.ModuleCode],
                    ['Description:', claim.Description],
                    ['Status:', claim.Status]
                ];

                details.forEach(([label, value]) => {
                    doc.text(label, labelXOffset, yOffset);
                    doc.text(value, valueXOffset, yOffset);
                    yOffset += 10;
                });

                // Save the PDF
                doc.save(`Invoice_Claim_${claim.ClaimID}.pdf`);
            });
        }

        //---------------------------------------------------------------------------------------

        // Function to delete a claim
        //---------------------------------------------------------------------------------------
        function deleteClaim(claimID) {
            // Implement delete functionality
            // This would typically involve an AJAX call to the server
            if (confirm('Are you sure you want to delete this claim?')) {
                // Send delete request to server
                fetch(`/Claims/Delete/${claimID}`, {
                    method: 'POST'
                })
                    .then(response => {
                        if (response.ok) {
                            // Remove the row from the table
                            const row = document.querySelector(`table tbody tr td:first-child:contains('${claimID}')`).closest('tr');
                            row.remove();
                        } else {
                            alert('Failed to delete the claim');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while deleting the claim');
                    });
            }
        }
        //---------------------------------------------------------------------------------------

        // Filtering Function
        //---------------------------------------------------------------------------------------
        function filterClaims() {
            // Get all filter values
            const lecturerIDFilter = document.getElementById('filterLecturerID').value.trim();
            const hoursWorkedFilter = document.getElementById('filterHoursWorked').value;
            const hourlyRateFilter = document.getElementById('filterHourlyRate').value;
            const moduleCodeFilter = document.getElementById('filterModuleCode').value;
            const amountFilter = document.getElementById('filterAmount').value;

            // Select the table body
            const tableBody = document.querySelector('table tbody');
            const rows = tableBody.querySelectorAll('tr');
            let visibleRowCount = 0;

            rows.forEach(row => {
                // Get cell values using index
                const lecturerID = row.cells[1].textContent.trim();
                const hoursWorked = parseFloat(row.cells[2].textContent);
                const hourlyRate = parseFloat(row.cells[3].textContent);
                const amount = parseFloat(row.cells[4].textContent);
                const moduleCode = row.cells[5].textContent.trim();

                let show = true;

                // Lecturer ID Filter - Exact match
                if (lecturerIDFilter && lecturerID !== lecturerIDFilter) {
                    show = false;
                }

                // Hours Worked Filter
                if (hoursWorkedFilter) {
                    switch (hoursWorkedFilter) {
                        case '0-10':
                            show = show && hoursWorked >= 0 && hoursWorked < 10;
                            break;
                        case '10-20':
                            show = show && hoursWorked >= 10 && hoursWorked < 20;
                            break;
                        case '20-30':
                            show = show && hoursWorked >= 20 && hoursWorked < 30;
                            break;
                        case '30+':
                            show = show && hoursWorked >= 30;
                            break;
                    }
                }

                // Hourly Rate Filter
                if (hourlyRateFilter) {
                    switch (hourlyRateFilter) {
                        case '0-50':
                            show = show && hourlyRate >= 0 && hourlyRate < 50;
                            break;
                        case '50-100':
                            show = show && hourlyRate >= 50 && hourlyRate < 100;
                            break;
                        case '100+':
                            show = show && hourlyRate >= 100;
                            break;
                    }
                }

                // Module Code Filter
                if (moduleCodeFilter && moduleCode !== moduleCodeFilter) {
                    show = false;
                }

                // Amount Filter
                if (amountFilter) {
                    switch (amountFilter) {
                        case '0-500':
                            show = show && amount >= 0 && amount < 500;
                            break;
                        case '500-1000':
                            show = show && amount >= 500 && amount < 1000;
                            break;
                        case '1000+':
                            show = show && amount >= 1000;
                            break;
                    }
                }

                // Toggle row visibility
                row.style.display = show ? '' : 'none';

                // Count visible rows
                if (show) visibleRowCount++;
            });

            // Update filter summary
            updateFilterSummary(visibleRowCount);
        }

        // Update Filter Summary Function
        function updateFilterSummary(visibleCount) {
            const filterSummary = document.getElementById('filterSummary');
            const totalRows = document.querySelectorAll('table tbody tr').length;

            filterSummary.textContent = `Showing ${visibleCount} of ${totalRows} claims`;
        }

        // Reset Filters Function
        function resetFilters() {
            // Reset all filter inputs
            document.getElementById('filterLecturerID').value = '';
            document.getElementById('filterHoursWorked').value = '';
            document.getElementById('filterHourlyRate').value = '';
            document.getElementById('filterModuleCode').value = '';
            document.getElementById('filterAmount').value = '';

            // Show all rows
            const rows = document.querySelectorAll('table tbody tr');
            rows.forEach(row => {
                row.style.display = '';
            });

            // Reset filter summary
            updateFilterSummary(rows.length);
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function () {
            // Add event listener to Go button
            document.getElementById('goFilterButton').addEventListener('click', filterClaims);

            // Initialize filter summary
            const rows = document.querySelectorAll('table tbody tr').length;
            updateFilterSummary(rows);

            // Polyfill for :contains selector if not supported
            jQuery.expr[':'].contains = function (a, i, m) {
                return jQuery(a).text().toUpperCase()
                    .indexOf(m[3].toUpperCase()) >= 0;
            };
        });
        //---------------------------------------------------------------------------------------

    </script>

</body>

</html>


      