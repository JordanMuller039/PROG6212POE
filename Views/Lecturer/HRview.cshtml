@model List<ST10150702_PROG6212_POE.Models.Claim>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HR View - Claims</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
        }

        body {
            background-image: url('@Url.Content("~/Pictures/lecturebackground.jpg")');
            background-size: 350px;
            background-repeat: repeat;
            background-position: center;
        }

        /* Overlay styling */
        #overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 255, 255, 0.6);
            z-index: 0;
        }

        /* Main container styling */
        .container {
            background-color: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
            width: 100%;
            max-width: 1200px;
            position: relative;
            z-index: 1;
        }

        /* Filters section */
        .filter-container {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

            .filter-group label {
                margin-bottom: 0.25rem;
                font-size: 0.9rem;
            }

            .filter-group input, .filter-group select {
                padding: 0.5rem;
                border: 1px solid #ddd;
                border-radius: 4px;
            }

        .filter-button-group {
            display: flex;
            gap: 0.5rem;
            align-items: flex-end;
        }

        .go-button, .reset-button {
            background-color: #007BFF;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            height: 38px;
        }

        .reset-button {
            background-color: #6c757d;
        }

        /* Table styling for claims */
        .claim-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 2rem;
        }

            .claim-table th, .claim-table td {
                border: 1px solid #ddd;
                padding: 0.75rem;
                text-align: left;
            }

            .claim-table th {
                background-color: #f4f4f4;
                font-weight: bold;
            }

        .status-approved {
            background-color: #4CAF50;
            color: white;
        }

        .status-rejected {
            background-color: #f44336;
            color: white;
        }

        .status-pending {
            background-color: #f58d42;
            color: white;
        }

        /* Button to show invoice */
        .invoice-button {
            background-color: #007BFF;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            display: inline-block;
        }

            .invoice-button:hover {
                background-color: #0056b3;
            }
    </style>
</head>

<body>

        <div id="view-claims" class="tab-content">
            <h1>View Claims</h1>

            <!-- Filter Container -->
            <div class="filter-container">
                <div class="filter-group">
                    <label for="filterLecturerID">Lecturer ID</label>
                    <input type="number" id="filterLecturerID" placeholder="Filter by Lecturer ID">
                </div>
                <div class="filter-group">
                    <label for="filterHoursWorked">Hours Worked</label>
                    <select id="filterHoursWorked">
                        <option value="">All</option>
                        <option value="0-10">0 - 10</option>
                        <option value="10-20">10 - 20</option>
                        <option value="20-30">20 - 30</option>
                        <option value="30+">30+</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="filterHourlyRate">Hourly Rate</label>
                    <select id="filterHourlyRate">
                        <option value="">All</option>
                        <option value="0-50">R0 - R50</option>
                        <option value="50-100">R50 - R100</option>
                        <option value="100+">R100+</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="filterModuleCode">Module Code</label>
                    <select id="filterModuleCode">
                        <option value="">All Modules</option>
                        <option value="PROG6111">PROG6111</option>
                        <option value="PROG6222">PROG6222</option>
                        <option value="CLDV6212">CLDV6212</option>
                        <option value="ADDB7311">ADDB7311</option>
                        <option value="CLDV5111">CLDV5111</option>
                        <option value="MPFD5622">MPFD5622</option>
                        <option value="SOEN6212">SOEN6212</option>
                        <option value="HETC7331">HETC7331</option>
                        <option value="FDAB6221">FDAB6221</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="filterAmount">Amount Due</label>
                    <select id="filterAmount">
                        <option value="">All</option>
                        <option value="0-500">R0 - R500</option>
                        <option value="500-1000">R500 - R1000</option>
                        <option value="1000+">R1000+</option>
                    </select>
                </div>
                <div class="filter-button-group">
                    <button id="goFilterButton" class="go-button">Go</button>
                    <button onclick="resetFilters()" class="reset-button">Reset</button>
                </div>
            </div>

            <div id="filterSummary" class="filter-summary"></div>

        <!-- Your filter and table structure goes here -->

        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>ClaimID</th>
                        <th>LecturerID</th>
                        <th>Total Hours Worked</th>
                        <th>Hourly Rate</th>
                        <th>Amount Due</th>
                        <th>Module Code</th>
                        <th>Description</th>
                        <th>Status</th>
                        <th>Actions</th>
                        <th>Supporting Documents</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.ClaimID</td>
                            <td>@item.LecturerID</td>
                            <td>@item.TotalHoursWorked</td>
                            <td>@item.HourlyRate</td>
                            <td>@item.AmountDue</td>
                            <td>@item.ModuleCode</td>
                            <td>@item.Description</td>
                            <td class="status-column" style="
                            @if(item.Status == "Approved") {
                                @:background-color: #4CAF50; color: white;
                            } else if(item.Status == "Rejected") {
                                @:background-color: #f44336; color: white;
                            } else if(item.Status == "Pending") {
                                @:background-color: #f58d42; color: white;
                            }">
                                @item.Status
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger" onclick="deleteClaim(@item.ClaimID)">Delete</button>
                                <button type="button" class="btn btn-primary" onclick="generateInvoice(@item.ClaimID)">Generate Invoice</button>
                            </td>
                            <td>
                                @if (!string.IsNullOrEmpty(item.DocumentPath))
                                {
                                    var documents = item.DocumentPath.Split(',');
                                    foreach (var doc in documents)
                                    {
                                        if (!string.IsNullOrWhiteSpace(doc))
                                        {
                                            var fileName = System.IO.Path.GetFileName(doc);
                                            <div>
                                                <a href="@Url.Content("~/" + doc)" target="_blank">@fileName</a>
                                            </div>
                                        }
                                    }
                                }
                                else
                                {
                                    <span>No documents uploaded</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </div>

    <script>
        // Function to generate and download PDF for a specific claim
        function generateInvoice(claimID) {
            // Get claim details based on claimID
            const claim = getClaimDetails(claimID);

            // Open a new window to display the claim details
            var invoiceWindow = window.open('', '_blank');
            invoiceWindow.document.write('<html><head><title>Invoice for Claim ' + claimID + '</title></head><body>');
            invoiceWindow.document.write('<h1>Invoice Details for Claim ' + claimID + '</h1>');
            invoiceWindow.document.write('<p><strong>Lecturer ID:</strong> ' + claim.LecturerID + '</p>');
            invoiceWindow.document.write('<p><strong>Total Hours Worked:</strong> ' + claim.TotalHoursWorked + '</p>');
            invoiceWindow.document.write('<p><strong>Hourly Rate:</strong> ' + claim.HourlyRate + '</p>');
            invoiceWindow.document.write('<p><strong>Amount Due:</strong> ' + claim.AmountDue + '</p>');
            invoiceWindow.document.write('<p><strong>Module Code:</strong> ' + claim.ModuleCode + '</p>');
            invoiceWindow.document.write('<p><strong>Description:</strong> ' + claim.Description + '</p>');
            invoiceWindow.document.write('<p><strong>Status:</strong> ' + claim.Status + '</p>');

            // Add button for downloading the PDF
            invoiceWindow.document.write('<button onclick="downloadPDF()">Download PDF</button>');

            // Add the PDF download function to the new window
            invoiceWindow.downloadPDF = function () {
                const doc = new jsPDF();
                doc.text('Invoice Details for Claim ' + claimID, 20, 20);
                doc.text('Lecturer ID: ' + claim.LecturerID, 20, 30);
                doc.text('Total Hours Worked: ' + claim.TotalHoursWorked, 20, 40);
                doc.text('Hourly Rate: ' + claim.HourlyRate, 20, 50);
                doc.text('Amount Due: ' + claim.AmountDue, 20, 60);
                doc.text('Module Code: ' + claim.ModuleCode, 20, 70);
                doc.text('Description: ' + claim.Description, 20, 80);
                doc.text('Status: ' + claim.Status, 20, 90);
                doc.save('Invoice_Claim_' + claimID + '.pdf');
            };
        }

        // Function to simulate fetching claim data by claimID
        function getClaimDetails(claimID) {
            const claimsData = [
                { ClaimID: 1, LecturerID: "L001", TotalHoursWorked: 20, HourlyRate: 50, AmountDue: 1000, ModuleCode: "CS101", Description: "Lecture Hours", Status: "Pending" },
                { ClaimID: 2, LecturerID: "L002", TotalHoursWorked: 15, HourlyRate: 60, AmountDue: 900, ModuleCode: "CS102", Description: "Tutorial Hours", Status: "Approved" },
                // Add more claims as needed
            ];

            return claimsData.find(claim => claim.ClaimID === claimID);
        }

        // Function to dynamically add PDF buttons to the table
        function addPDFDownloadButtons() {
            const tableBody = document.querySelector('table tbody');
            const rows = tableBody.querySelectorAll('tr');

            rows.forEach(row => {
                const claimID = parseInt(row.cells[0].textContent.trim());  // Assuming ClaimID is in the first column

                // Create and append the "Download PDF" button
                const buttonCell = row.querySelector('.download-btn-cell');
                if (buttonCell) {
                    const downloadButton = document.createElement('button');
                    downloadButton.textContent = 'Download PDF';
                    downloadButton.onclick = function () {
                        generateInvoice(claimID);
                    };
                    buttonCell.appendChild(downloadButton);
                }
            });
        }

        // Call this function when the page loads to add PDF buttons to each row
        window.onload = function () {
            addPDFDownloadButtons();
        };

        // Filtering
        //-------------------------------------------------------------------------------------------------

        function filterClaims() {
            // Get all filter values
            const lecturerIDFilter = document.getElementById('filterLecturerID').value.trim();
            const hoursWorkedFilter = document.getElementById('filterHoursWorked').value;
            const hourlyRateFilter = document.getElementById('filterHourlyRate').value;
            const moduleCodeFilter = document.getElementById('filterModuleCode').value;
            const amountFilter = document.getElementById('filterAmount').value;

            // Select the table body
            const tableBody = document.querySelector('table tbody');
            const rows = tableBody.querySelectorAll('tr');
            let visibleRowCount = 0;

            rows.forEach(row => {
                // Get cell values using index
                const lecturerID = row.cells[1].textContent.trim();
                const hoursWorked = parseFloat(row.cells[2].textContent);
                const hourlyRate = parseFloat(row.cells[3].textContent);
                const amount = parseFloat(row.cells[4].textContent);
                const moduleCode = row.cells[5].textContent.trim();

                let show = true;

                // Lecturer ID Filter - Exact match
                if (lecturerIDFilter && lecturerID !== lecturerIDFilter) {
                    show = false;
                }

                // Hours Worked Filter
                if (hoursWorkedFilter) {
                    switch (hoursWorkedFilter) {
                        case '0-10':
                            show = show && hoursWorked >= 0 && hoursWorked < 10;
                            break;
                        case '10-20':
                            show = show && hoursWorked >= 10 && hoursWorked < 20;
                            break;
                        case '20-30':
                            show = show && hoursWorked >= 20 && hoursWorked < 30;
                            break;
                        case '30+':
                            show = show && hoursWorked >= 30;
                            break;
                    }
                }

                // Hourly Rate Filter
                if (hourlyRateFilter) {
                    switch (hourlyRateFilter) {
                        case '0-50':
                            show = show && hourlyRate >= 0 && hourlyRate < 50;
                            break;
                        case '50-100':
                            show = show && hourlyRate >= 50 && hourlyRate < 100;
                            break;
                        case '100+':
                            show = show && hourlyRate >= 100;
                            break;
                    }
                }

                // Module Code Filter
                if (moduleCodeFilter && moduleCode !== moduleCodeFilter) {
                    show = false;
                }

                // Amount Filter
                if (amountFilter) {
                    switch (amountFilter) {
                        case '0-500':
                            show = show && amount >= 0 && amount < 500;
                            break;
                        case '500-1000':
                            show = show && amount >= 500 && amount < 1000;
                            break;
                        case '1000+':
                            show = show && amount >= 1000;
                            break;
                    }
                }

                // Toggle row visibility
                row.style.display = show ? '' : 'none';

                // Count visible rows
                if (show) visibleRowCount++;
            });

            // Update filter summary
            updateFilterSummary(visibleRowCount);
        }

        // Update Filter Summary Function
        function updateFilterSummary(visibleCount) {
            const filterSummary = document.getElementById('filterSummary');
            const totalRows = document.querySelectorAll('table tbody tr').length;

            filterSummary.textContent = Showing ${ visibleCount } of ${ totalRows } claims;
        }

        // Reset Filters Function
        function resetFilters() {
            // Reset all filter inputs
            document.getElementById('filterLecturerID').value = '';
            document.getElementById('filterHoursWorked').value = '';
            document.getElementById('filterHourlyRate').value = '';
            document.getElementById('filterModuleCode').value = '';
            document.getElementById('filterAmount').value = '';

            // Show all rows
            const rows = document.querySelectorAll('table tbody tr');
            rows.forEach(row => {
                row.style.display = '';
            });

            // Reset filter summary
            updateFilterSummary(rows.length);
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function () {
            // Add event listener to Go button
            document.getElementById('goFilterButton').addEventListener('click', filterClaims);

            // Initialize filter summary
            const rows = document.querySelectorAll('table tbody tr').length;
            updateFilterSummary(rows);
        });

        //---------------------------------------------------------------------------------------
    </script>

</body>

</html>
